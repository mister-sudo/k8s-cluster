---
- block:

    - name: Pull images
      shell: kubeadm config images pull >> ~/pull_images.log
      args:
        creates: ~/pull_images.log

    - name: Init cluster
      ansible.builtin.shell: kubeadm init --pod-network-cidr={{ podSubnet }} --control-plane-endpoint={{ controlPlaneEndpoint }}:6443 --upload-certs >> init_cluster.log
      args:
        creates: init_cluster.log
      register: kube_init
      run_once: true
      when: inventory_hostname == groups["master"][0]

    - name: Sleep for continue with play
      ansible.builtin.wait_for:
        timeout: "{{ sleep_time }}"

    - name: Set kubeadm certificate key
      set_fact:
        kubeadm_certificate_key: "{{ item | regex_search('--certificate-key ([^ ]+)','\\1') }}"
      with_items: "{{ kube_init.stdout_lines | default([]) }}"
      when:
        - (item | trim) is match('.*--certificate-key.*')
        - kube_init is defined

    - name: Check that the /etc/kubernetes/kubelet.conf exists
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_existance

    - name: Create ~/.kube directory
      file:
        path: ~/.kube
        state: directory
        mode: '0755'

    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: ~/.kube/config
        remote_src: yes
      when: inventory_hostname == groups["master"][0]

    - name: Create kube-flannel
      ansible.builtin.template:
        src: kube-flannel.yml.j2
        dest: ~/kube-flannel.yml
        owner: root
        group: root
        mode: '0644'
      when: inventory_hostname == groups["master"][0]
      notify: kube flannel

    - meta: flush_handlers

    - name: Token create
      ansible.builtin.shell: kubeadm token create
      register: kube_token
      run_once: true
      when: inventory_hostname == groups['master'][0]

    - name: Upload control plane certificates
      ansible.builtin.shell: kubeadm init phase upload-certs --upload-certs
      register: kubeadm_upload_cert
      changed_when: false
      when: inventory_hostname == groups['master'][0]

    - name: set fact 'kubeadm_certificate_key' for later use
      set_fact:
        kubeadm_certificate_key: "{{ hostvars[groups.master.0]['kubeadm_upload_cert']['stdout_lines'][-1] | trim }}"
      run_once: true

    - name: Calculate kubeadm CA cert hash
      ansible.builtin.shell: set -o pipefail && openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
      args:
        executable: /bin/bash
      register: kubeadm_ca_hash
      changed_when: false
      run_once: true
      when: inventory_hostname == groups["master"][0]

    - name: Join all master to cluster
      ansible.builtin.shell: kubeadm join {{ controlPlaneEndpoint }}:6443 --token {{ kube_token.stdout }} --discovery-token-ca-cert-hash sha256:{{ kubeadm_ca_hash.stdout }} --control-plane --certificate-key {{ kubeadm_certificate_key }} >> ~/join_cluster.log
      args:
        creates: ~/join_cluster.log
      when: inventory_hostname != groups["master"][0]

    - name: Sleep for continue with play
      ansible.builtin.wait_for:
        timeout: "{{ sleep_time }}"

    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: ~/.kube/config
        remote_src: yes
      when: inventory_hostname != groups["master"][0]

  when: "'master' in group_names"

- block:

    - name: Join all worker to cluster
      ansible.builtin.shell: kubeadm join {{ controlPlaneEndpoint }}:6443 --token {{ kube_token.stdout }} --discovery-token-ca-cert-hash sha256:{{ kubeadm_ca_hash.stdout }} >> join_worker.log
      args:
        creates: ~/join_worker.log

  when: "'worker' in group_names"